{
  "name": "css-condense",
  "description": "CSS compressor.",
  "keywords": [
    "css",
    "compress",
    "compression",
    "minify",
    "stylesheet"
  ],
  "author": {
    "name": "Rico Sta. Cruz"
  },
  "version": "0.0.6",
  "engines": {
    "node": ">=0.4.0"
  },
  "main": "./index.js",
  "bin": {
    "cssc": "./bin/cssc"
  },
  "homepage": "http://github.com/rstacruz/css-condense",
  "repository": {
    "type": "git",
    "url": "https://github.com/rstacruz/css-condense.git"
  },
  "dependencies": {
    "css-parse": ">= 1.0.3",
    "css-stringify": ">= 1.0.2",
    "commander": ">= 0.0.1"
  },
  "scripts": {
    "test": "make test"
  },
  "readme": "css-condense\n============\n\nCompresses CSS, and isn't conservative about it.\n\nInstallation\n------------\n\nInstall [NodeJS](http://nodejs.org/), and:\n\n    $ npm install -g css-condense\n\nUsage\n-----\n\n    $ cssc file.css > file.min.css\n\nOr via NodeJS:\n\n``` js\nrequire('css-condense').compress(\"div {color: red}\")\n```\n\nWhat it does\n------------\n\nWell, it does a lot of things. The most common of which is:\n\n#### Whitespace removal\n\nIt strips whitespaces. Yeah, well, every CSS compressor out there does that,\nright?\n\n``` css\ndiv {\n  color: red;\n  width: 100%;\n}\n```\n\nBecomes:\n\n``` css\ndiv{color:red;width:100%}\n```\n\n#### Identifier compression\n\nSome identifiers, like pixel values or colors, can be trimmed to save on space.\n\n``` css\ndiv { color: #ff0000; }\nspan { margin: 1px !important; }\nh1 { background: none; }\na { padding: 0.30em; }\np { font-family: \"Arial Black\", sans-serif; }\nabbr { background: url(\"tile.jpg\"); }\n```\n\nCan be: (newlines added for readability)\n\n``` css\ndiv{color:#f00}                           /* Collapsing 6-digit hex colors to 3 */\nspan{margin:1px!important}                /* Strip space before !important */\nh1{background:0}                          /* Change border/background/outline 'none' to '0' */\na{padding:.3em}                           /* Removing trailing zeroes from numbers */\np{font-family: Arial Black,sans-serif}    /* Font family unquoting */\nabbr{background:url(tile.jpg)}            /* URL unquoting */\n```\n\n#### More compressions\n\n``` css\nul { padding: 30px 30px 30px 30px; }\nli { margin: 0 auto 0 auto; }\n.zero { outline: 0px; }\na + .b { color: blue; }\n.color { background: rgb(51,51,51); }\n```\n\nOutput:\n\n``` css\nul{padding:30px}                          /* Collapsing border/padding values */\nli{margin:0 auto}                         /* Same as above */,\n.zero{outline:0}                          /* Removing units from zeros */\na+.b{color:blue}                          /* Collapse + and > in selectors */\n.color{background:#333}                   /* Converting rgb() values to hex */\n```\n\n#### Selector/declaration sorting\n\nEach rule has its selectors and declarations sorted. This may not seem like it\nwill net any effect, but (1) it increases the likelihood that consecutive\nproperties will be gzipped, and (2) it will help consolidation (more on that\nlater).\n\n``` css\ndiv, a { z-index: 10; background: green; }\n```\n\nbecomes:\n\n``` css\na,div{background:green;z-index:10}\n```\n\nThe dangerous things it does\n----------------------------\n\nBut that's not all! Here's where things get exciting!\n(Don't worry, you can turn these off with the `--safe` flag.)\n\n#### Consolidation via selectors\n\nRules with same selectors can be consolidated.\n\n``` css\ndiv { color: blue; }\ndiv { cursor: pointer; }\n```\n\nCan be consolidated into:\n\n``` css\ndiv{color:blue;cursor:pointer}\n```\n\n#### Consolidation via definitions\n\nRules with same definitions will be consolidated too. Great if you use\nmixins in your favorite CSS preprocessor mercilessly. (Those clearfixes will\ntotally add up like crazy)\n\n``` css\ndiv { color: blue; }\np { color: blue; }\n```\n\nBecomes:\n\n``` css\ndiv,p{color:blue}\n```\n\n#### Media query consolidation\n\nRules with the same media query will be merged into one. Say:\n\n``` css\n@media screen and (min-width: 780px) {\n  div { width: 100%; }\n}\n@media screen and (min-width: 780px) {\n  p { width: 50%; }\n}\n```\n\nBecomes:\n\n``` css\n@media screen and (min-width:780px){div{width:100%}p{width:50%}}\n```\n\nCommand line usage\n------------------\n\n```\n$ cssc --help\n\n  Usage: cssc [<sourcefile ...>] [options]\n\n  Options:\n\n    -h, --help                         output usage information\n    -V, --version                      output the version number\n    --no-consolidate-via-declarations  Don't consolidate rules via declarations\n    --no-consolidate-via-selectors     Don't consolidate rules via selectors\n    --no-consolidate-media-queries     Don't consolidate media queries together\n    --no-sort-selectors                Don't sort selectors in a rule\n    --no-sort-declarations             Don't sort declarations in a rule\n    --no-compress                      Don't strip whitespaces from output\n    --no-sort                          Turn off sorting\n    --line-breaks                      Add linebreaks\n    -S, --safe                         Don't do unsafe operations\n\n  The --no-sort switch turns off all sorting (ie, it implies --no-sort-*).\n  The --safe switch turns off all consolidation behavior (ie, it implies --no-consolidate-*).\n\n  If a <sourcefile> is not specified, input from stdin is read instead.\n  Examples:\n\n    $ cssc style.css > style.min.css\n    $ cat style.css | cssc > style.min.css\n```\n\nProgramatic usage\n-----------------\n\nYou can use the `css-condense` NodeJS package, or you can use\n`dist/css-condense.js` for the browser.\n\nNodeJS:\n\n``` javascript\nvar cssc = require('css-condense');\nvar str = \"div { color: blue; }\";\n\ncssc.compress(str);\ncssc.compress(str, {\n  sortSelectors: false,\n  lineBreaks: true\n});\n```\n\nOr with `css-condense.js`:\n\n``` javascript\nCssCondense.compress(str);\n```\n\nBut you'll risk breaking things!\n--------------------------------\n\nWell, yes. You want a safe approach? Use `--safe` or go with [YUI \nCompressor](http://developer.yahoo.com/yui/compressor/).\n\nBut hey, css-condense tries its best to make assumptions to ensure that no\nbreakage (or at least minimal breakage) will happen.\n\nFor instance, consolidating media queries can go wrong in this case:\n\n``` css\n/* Restrict height on phones */\n@media screen and (max-width: 480px) {\n  .box { max-height: 10px; } /* [1] */\n}\n.box {\n  padding: 20px; /* [2] */\n}\n/* Small screens = less spacing */\n@media screen and (max-width: 480px) {\n  .box { padding: 10px; } /* [3] */\n}\ndiv { color: blue; }\n```\n\nThe two media queries have the same query, and will be subject to consolidation.\nHowever, if the `[3]` is to be consolidated into `[1]`, you will not get the\neffect you want.\n\n``` css\n/* Bad :( */\n@media screen and (max-width:480px){.box{max-height:10px;padding:10px}}\n.box{padding:20px}\ndiv{color:blue}\n```\n\n`.box`'s padding is supposed to be overridden to `10px`, which in this case,\ndoesn't happen anymore.\n\ncss-condense then makes the assumption is that media queries are usually used to\noverride \"normal\" rules. The effect is that in cases like these, consolidated\nrels are placed at its last appearance:\n\n``` css\n/* Good -- css-condense does things this way! */\n.box{padding:20px}\n@media screen and (max-width:480px){.box{max-height:10px;padding:10px}}\ndiv{color:blue}\n```\n\nHowever, it indeed isn't perfectly safe: if you have a `max-height` rule on the\nregular `.box`, you're gonna have a bad time.\n\nWhat about with CSS rules?\n--------------------------\n\ncss-condense also goes by the assumption that most people put their least\nspecific things on top (like resets).\n\n``` css\nbody, div, h1, p { margin: 0; padding: 0; }\n.listing h1 { padding: 10px; }\n.item h1 { margin: 0; padding: 0; }\n```\n\nNow if `.item` is inside `.listing`, all of these rules affect `.listing h1`.\nThe final effect is that the `h1` will have a padding of `0`.\n\nIf the consolidation puts things on top, `h1` will get a padding of `10px`. Not\ngood.\n\n``` css\n/* Bad :( */\nbody,div,h1,p,.item h1 { margin: 0; padding: 0; }\n.listing h1 { padding: 10px; }\n```\n\n...which is why css-condense assumes that the more specific things are usually\nat the bottom. This then compresses nicely to:\n\n``` css\n/* Good -- css-condense knows what's good for you. */\n.listing h1 { padding: 10px; }\nbody,div,h1,p,.item h1 { margin: 0; padding: 0; }\n```\n\n...giving your H1 the right padding: `0`.\n\nHow's the real-world performance?\n---------------------------------\n\nI ran it through some real-world CSS files that have already been compressed,\nand usually get around 5% to 25% more compression out of it.\n\nExample: https://gist.github.com/3583505\n\nBut gzip will compress that for you anyway!\n-------------------------------------------\n\nYes, but css-condense will also reduce the number of rules (usually around 10%\nto 40% less rules!), which can hypothetically make page rendering faster :)\n\nAcknowledgements\n----------------\n\nSpecial thanks to [TJ Holowaychuk] for\n[css-parse] which this project uses to parse CSS, and [css-stringify] which is\nused to build the final output.\n\n[TJ Holowaychuk]: https://github.com/visionmedia\n[css-parse]: https://github.com/visionmedia/node-css-parse\n[css-stringify]: https://github.com/visionmedia/node-css-stringify\n\nÂ© 2012, Rico Sta. Cruz. Released under the [MIT \nLicense](http://www.opensource.org/licenses/mit-license.php).\n\n**css-condense** is authored and maintained by [Rico Sta. Cruz][rsc] with help \nfrom its [contributors][c]. It is sponsored by my startup, [Nadarei, Inc][nd].\n\n * [My website](http://ricostacruz.com) (ricostacruz.com)\n * [Nadarei, Inc.](http://nadarei.co) (nadarei.co)\n * [Github](http://github.com/rstacruz) (@rstacruz)\n * [Twitter](http://twitter.com/rstacruz) (@rstacruz)\n\n[rsc]: http://ricostacruz.com\n[c]:   http://github.com/rstacruz/lidoc/contributors\n[nd]:  http://nadarei.co\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/rstacruz/css-condense/issues"
  },
  "_id": "css-condense@0.0.6",
  "dist": {
    "shasum": "ad40c957ad64e84bdcd81e37bdc393a99f453bb0"
  },
  "_from": "css-condense@0.0.6",
  "_resolved": "https://registry.npmjs.org/css-condense/-/css-condense-0.0.6.tgz"
}
