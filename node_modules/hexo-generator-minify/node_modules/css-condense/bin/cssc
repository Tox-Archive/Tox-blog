#!/usr/bin/env node

var compress = require('../index').compress;
var fs = require('fs');
var path = require('path');

function version() {
  var pkg = JSON.parse(fs.readFileSync(path.join(__dirname, '..', 'package.json'), 'utf-8'));
  return pkg.version;
}

function getOptions() {
  return require('commander')
    .version("css-condense version "+version())
    .usage("[<sourcefile ...>] [options]")
    .option("--no-consolidate-via-declarations", "Don't consolidate rules via declarations")
    .option("--no-consolidate-via-selectors", "Don't consolidate rules via selectors")
    .option("--no-consolidate-media-queries", "Don't consolidate media queries together")
    .option("--no-sort-selectors", "Don't sort selectors in a rule")
    .option("--no-sort-declarations", "Don't sort declarations in a rule")
    .option("--no-compress", "Don't strip whitespaces from output")
    .option("--no-sort", "Turn off sorting")
    .option("--line-breaks", "Add linebreaks")
    .option("--debug", "Debug mode")
    .option("-S, --safe", "Don't do unsafe operations")
    .on('--help', function() {
      console.log("  The --no-sort switch turns off all sorting (ie, it implies --no-sort-*).");
      console.log("  The --safe switch turns off all consolidation behavior (ie, it implies --no-consolidate-*).");
      console.log("");
      console.log("  If a <sourcefile> is not specified, input from stdin is read instead.");
      console.log("  Examples:");
      console.log("");
      console.log("    $ cssc style.css > style.min.css");
      console.log("    $ cat style.css | cssc > style.min.css");
    });
}

var options = getOptions().parse(process.argv);

var input;
if (options.args.length === 0) {
  var input = '';
  process.stdin.resume();
  process.stdin.on('data', function (chunk) { input += chunk; });
  process.stdin.on('end', function () { console.log(compress(input, options)); });
} else {
  input = "";
  options.args.forEach(function(fname) {
    input += "\n" + fs.readFileSync(fname, 'utf-8');
  });
  console.log(compress(input, options));
}
