summarize = require('./summarize').summarize

ret = summarize "

有创业者在试图减轻人们信息筛选之苦，我们之前介绍过两款机器代替人工做文章摘要的产品，一是Summly，该产品出自一个 16 岁的少年之手，Nick D'Alosio 为自己的自动新闻摘要应用Summly拿到100万美元融资，后传 Yahoo CEO Marissa Mayer 也有意收购 Summly（暂无更新的消息）。另一款产品Clipped则是出自 15 岁的高中生之手，该产品据称有一套相对复杂的摘要提取算法，会为每篇文章提取主要的三个观点，清晰的罗列出来。

我同事体验后发现，这两款产品想法和愿景很好，但是实际使用效果并不如人意：Summly 基本就是截取个开头，而一些文章的核心内容并没放在开头；而针对一些比较偏重事实的文章，确实读 Clipped 提出的三点摘要就能大概了解文章内容了，而一些偏重观点性的文章，Clipped 还是提的不是很好。——受 Summly 和 Clipped 启发，我们最近也推出了原始但有效的人工摘要“8点1氪”（815.36kr.com），总结出 1、2、3 点，让读者在最短时间获得尽可能多的信息。

现在，国内也有一家创业公司希望能让机器代劳，做自动摘要。甘肃智呈科技推出了初级版本的“自动摘要”（对，名字直接就叫自动摘要）。用户在原文框内粘贴要摘要的文章以及输出的比例，点击“提取摘要”，即可在摘要输出框内看到摘要结果。输出比例从 10％－100％不等，比例越小，提取出来的内容越少。

其网站上现有三个示例，新闻、说明文、议论文各一篇，从示例的效果来看，个人觉得虽不如人工摘要来的紧凑和传情达意，但基本上也能从摘出来的内容了解到文章的大意。但是如果粘贴 36Kr 上的文章进去的话，出来的效果并不让人满意，达不到通常理解的摘要的标准。“自动摘要”的效果究竟如何，感兴趣的朋友可以亲自测试看看（可以直接测试你正在看的这篇文章看看）。

智呈科技的负责人王伟东向 36Kr 介绍了“自动摘要”背后的实现办法：

    利用关联模型实现自动摘要：通过统计文档中的关键词和词频信息，建立文章的“关联网络”，依据该关联网络中的关联度作为分析句子重要性的指标来确定文章中的重要句子，进而根据要求生成文档摘要；能够在速度相对较快的同时，保证自动摘要的结果比较令人满意，且对文档的通用程度比较好，而且基本原理不受语言种类限制。（注：该实现办法并不涉及语义分析）

但他也同时表示，对于新闻类和叙事类文章目前摘要还不准确。“目前最大的困难不是技术，核心算法都已完成，只是技术上后期还需要大量优化。考虑到成本问题，我们很有可能在寻找到意向合作企业或获得融资后才会投入大量精力。”

在信息过载的年代，有效过滤和筛选个性化的、有价值的信息的重要性不言而喻，但就目前而言，机器推荐或摘要还有不小的改进空间。在机器和算法成熟以前，我更愿意相信人的力量。当然，“自动摘要”这类产品的努力和尝试还是很有益的，到最后，帮人类提高效率还是得靠机器。你又怎么看呢？

"

console.log ret.summarizes